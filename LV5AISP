#include<stdio.h>
#include <stdlib.h>
#include <time.h>
 
// function prototyping
void heapify(int*,int, int);
void heapsort(int*, int);
void print_array(int*, int);

int Left(int i){
    return (2 * i + 1);
}

int Right(int i){
    return (2 * i + 2);
}

void bubble_sort(int heap[], int n) {
    int i,j;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (heap[j] > heap[j + 1]) {
                int temp = heap[j];
                heap[j] = heap[j + 1];
                heap[j + 1] = temp;
            }
        }
    }
}


void merge(int arr[], int l, 
           int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;
  
    int L[n1], R[n2];
  
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    i = 0; 
    j = 0; 
    k = l; 
    while (i < n1 && j < n2) 
    {
        if (L[i] <= R[j]) 
        {
            arr[k] = L[i];
            i++;
        }
        else 
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
  
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) 
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r)
{
    if (l < r) 
    {
        int m = l + (r - l) / 2;

        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
  
        merge(arr, l, m, r);
    }
}

 
int main()
{
    time_t t1,t2;
    srand(time(NULL));
    int *array;
    int n,i;
    scanf("%d", &n);
    
    array = (int*)malloc(n * sizeof(int));
    
    for (i = 0; i<n;i++){
        array[i] = rand()%100;
    }

    //print_array(array, n);
    t1 = clock();
    //heapsort(array, n);
    //bubble_sort(array,n);
    mergeSort(array, 0, n - 1);
    t2 = clock();
    //print_array(array, n);
    printf("\nProteklo vrijeme: %f ms",(float)(t2-t1)/1000);
    return 0;
}
 
void heapsort(int* arr, int n)
{
    int i;
    for (i = n / 2 - 1; i >= 0; i--)
    {
        heapify(arr, n, i);
    }
 
    for (i = n - 1; i >= 0; i--)
    {
        int temp = arr[i];
        arr[i] = arr[0];
        arr[0] = temp;
 
        heapify(arr, i, 0);
    }
}
 
void heapify(int* arr, int n, int i)
{
    int largest = i;
 
    int left = Left(i);
    int right  = Right(i);
 
    if (left < n && arr[left] > arr[largest])
    {
        largest = left;
    }
 
    if (right < n && arr[right] > arr[largest])
    {
        largest = right;
    }
 
    if (largest != i)
    {
        int temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;
 
        heapify(arr, n, largest);
    }
}
 
void print_array(int* arr, int n)
{
    int i;
    for (i = 0; i < n; i++)
    {
        printf("%d  ", arr[i]);
    }
}
